"""Script for manually testing Deezer API client.

This script demonstrates real API calls to Deezer API.
Run this script to verify the Deezer client functionality in isolation.
"""

import asyncio
import logging

from grimwaves_api.modules.music_metadata.clients.deezer import DeezerClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)


async def main() -> None:
    """Run the tests with the real Deezer API."""
    client = DeezerClient()
    print("Testing Deezer API client...")

    try:
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–∞
        print("\nüîç Searching for 'Fortitude' by 'Gojira'...")
        search_results = await client.search_releases("Gojira", "Fortitude")

        if not search_results or not search_results.get("data"):
            print("‚ùå No results found")
            return

        # –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö
        print(f"‚úÖ Found {len(search_results.get('data', []))} results:")
        for idx, album in enumerate(search_results.get("data", [])[:3]):
            print(f"{idx + 1}. {album.get('title')} by {album.get('artist', {}).get('name')}")
            print(f"   Album ID: {album.get('id')}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤–æ–º –∞–ª—å–±–æ–º–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        album_id = search_results.get("data", [])[0].get("id")
        if album_id:
            print(f"\nüìÄ Getting details for album ID: {album_id}")
            album_details = await client.get_album(str(album_id))
            print("‚úÖ Album details:")
            print(f"Title: {album_details.get('title')}")
            print(f"Artist: {album_details.get('artist', {}).get('name')}")
            print(f"Release date: {album_details.get('release_date')}")
            print(f"Label: {album_details.get('label')}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∞–ª—å–±–æ–º–∞
            print("\nüéµ Getting tracks for the album...")
            tracks = await client.get_album_tracks(str(album_id))
            print(f"‚úÖ Found {len(tracks)} tracks:")
            for idx, track in enumerate(tracks[:5]):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç—Ä–µ–∫–æ–≤
                print(f"{idx + 1}. {track.get('title')} - {track.get('duration')}s")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ ISRC –∫–æ–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
                if idx == 0:
                    track_id = track.get("id")
                    print(f"\nüìä Getting details for track ID: {track_id}")
                    track_details = await client.get_track(str(track_id))
                    print(f"ISRC: {track_details.get('isrc', 'N/A')}")

    except Exception as e:
        print(f"‚ùå Error occurred: {e}")

    finally:
        await client.close()
        print("\n‚úÖ Tests completed")


if __name__ == "__main__":
    asyncio.run(main())
